#!/usr/bin/python3.7
# -*- coding: utf-8 -*-

"""
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""

import os

workdir: config["workdir"]
singularity: config["singularity_docker_image"]
localrule: copy


rule Fastq_Quality_Control_target:
    input:
        "multiqc/quality_report.html"


rule copy:
    input:
        lambda wildcards: config["sample"][wildcards.sample]
    output:
        temp("{sample}")
    message:
        "Copying {wildcards.sample} for quality control"
    wildcard_constraints:
        sample = r"[^/]+"
    resources:
        mem_mb = (
            lambda wildcards, attempt: min(attempt * 128, 512)
        )
    threads: 1
    params:
        extra = "",
        cold_storage = config["cold_storage"]
    wrapper:
        "https://raw.githubusercontent.com/tdayris/yawn/master/SnakemakeWrappers/cp/8.25"


rule fastqc:
    input:
        f"{{sample}}.{config['fq_ext']}"
    output:
        html = "fastqc/{sample}_fastqc.html",
        zip = "fastqc/{sample}_fastqc.zip"
    message:
        "Controlling quality of {wildcards.sample} with fastqc"
    resources:
        mem_mb = (
            lambda wildcards, attempt: min(attempt * 128, 512)
        )
    threads: 1
    log:
        "logs/fastqc_{sample}.logs"
    params:
        extra = "",
        tempdir = "fastqc"
    wrapper:
        "https://raw.githubusercontent.com/tdayris/yawn/master/SnakemakeWrappers/fastqc/0.11.7"

rule multiqc:
    input:
        html = expand(
            "fastqc/{sample}_fastqc.html",
            sample=[f[:-len(config["fq_ext"])-1]
                    for f in config["sample"].keys()]
        ),
        zip = expand(
            "fastqc/{sample}_fastqc.zip",
            sample=[f[:-len(config["fq_ext"])-1]
                    for f in config["sample"].keys()]
        )
    output:
        "multiqc/quality_report.html"
    message:
        "Merging quality reports from FastQC"
    resources:
        mem_mb = (
            lambda wildcards, attempt: min(attempt * 128, 512)
        )
    threads: 1
    log:
        "logs/multiqc.logs"
    params:
        extra = "",
        tempdir = "fastqc"
    wrapper:
        "https://raw.githubusercontent.com/tdayris/yawn/master/SnakemakeWrappers/multiqc/1.6"
