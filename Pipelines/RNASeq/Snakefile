#!/usr/bin/python3.7
# -*- coding: utf-8 -*-

"""
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""

import os

workdir: config["workdir"]
singularity: config["singularity_docker_image"]
localrule: copy


rule RNASeq_target:
    input:
        copy = config["sample"].keys(),
        source = config["sources"].keys(),
        quant = expand(
            "quant/salmon/{sample}/quant.sf",
            sample=config["pair"].keys()
        ),
        saindex = "quant/salmon/transcriptome_index",
        fastqc = expand(
            "fastqc/{sample}_fastqc.html",
            sample=config["sample"].keys()
        ),
        multiqc = "multiqc/report.html",
        merge_quants = expand(
            "quant/{count}.tsv",
            count=["NumReads", "TPM"]
        ),
        PCA = ["images/TPM_PC_1_PC_2.png", "images/TPM_PC_3_PC_4.png"]
    message:
        "Finishing the Slamon pipeline"


rule copy_fastq:
    input:
        lambda wildcards: config["sample"][wildcards.sample]
    output:
        temp("{sample}")
    message:
        "Copying {wildcards.sample} for further process"
    resources:
        mem_mb = (
            lambda wildcards, attempt: min(attempt * 128, 512)
        )
    wildcard_constraints:
        sample = r"[^/]+"
    threads: 1
    params:
        extra = "",
        cold_storage = config["cold_storage"]
    wrapper:
        "https://raw.githubusercontent.com/tdayris/yawn/master/SnakemakeWrappers/cp/8.25"


rule copy_sources:
    input:
        lambda wildcards: config["sources"][wildcards.source]
    output:
        temp("{source}")
    message:
        "Copying {wildcards.source} for indexing"
    resources:
        mem_mb = (
            lambda wildcards, attempt: min(attempt * 128, 512)
        )
    wildcard_constraints:
        source = r"[^/]+"
    threads: 1
    params:
        extra = "",
        cold_storage = config["cold_storage"]
    wrapper:
        "https://raw.githubusercontent.com/tdayris/yawn/master/SnakemakeWrappers/cp/8.25"


rule salmon_index:
    input:
        config["fasta_transcriptome"]
    output:
        directory("quant/salmon/transcriptome_index")
    log:
        "logs/salmon/transcriptome_index.log"
    message:
        "Indexing Transcriptome"
    resources:
        mem_mb = (
            lambda wildcards, attempt: min(attempt * 8192, 20480)
        )
    threads:
        min(config["threads"], 8)
    params:
        extra = config.get("salmon_index_extra", "")
    wrapper:
        "master/bio/salmon/index"


def fq_pairs(wildcards):
    return config["pair"][wildcards.sample]


rule salmon_quant:
    input:
        unpack(fq_pairs),
        index = ancient("quant/salmon/transcriptome_index")
    output:
        quant = "quant/salmon/{sample}/quant.sf",
        quant_genes = "quant/salmon/{sample}/quant.genes.sf",
        cmd = temp("quant/salmon/{sample}/cmd_info.json"),
        lib = temp("quant/salmon/{sample}/lib_format_counts.json"),
        aux_info = temp(directory("quant/salmon/{sample}/aux_info")),
        lib_params = temp(directory("quant/salmon/{sample}/libParams")),
        logs = temp(directory("quant/salmon/{sample}/logs"))
    log:
        "logs/salmon/quant_{sample}.log"
    message:
        "Quantification of {wildcards.sample} with salmon"
    threads:
        min(config["threads"], 12)
    priority:
        50
    params:
        libtype = config["libtype"],
        extra = config.get("salmon_quant_extra", "")
    resources:
        mem_mb = (
            lambda wildcards, attempt: min(attempt * 8192, 20480)
        )
    wrapper:
        "master/bio/salmon/quant"

rule fastqc:
    input:
        "{sample}"
    output:
        html = "fastqc/{sample}_fastqc.html",
        zip = "fastqc/{sample}_fastqc.zip"
    params: ""
    threads: 1
    resources:
        mem_mb = (
            lambda wildcards, attempt: min(attempt * 256, 768)
        )
    log:
        "logs/fastqc/{sample}.log"
    message:
        "Controling quality of {wildcards.sample}"
    wrapper:
        "master/bio/fastqc"


rule multiqc:
    input:
        html = expand("fastqc/{sample}_fastqc.html",
                      sample=config["sample"].keys()),
        zip = expand("fastqc/{sample}_fastqc.zip",
                     sample=config["sample"].keys()),
        cmd = expand("quant/salmon/{sample}/cmd_info.json",
                     sample=config["pair"].keys()),
        lib = expand("quant/salmon/{sample}/lib_format_counts.json",
                     sample=config["pair"].keys())
    output:
        "multiqc/report.html"
    params: ""
    threads: 1
    resources:
        mem_mb = (
            lambda wildcards, attempt: min(attempt * 256, 768)
        )
    log:
        "logs/multiqc.log"
    message:
        "Gathering quality reports"
    wrapper:
        "master/bio/multiqc"


rule merge_quants:
    input:
        **{
            sample: f"quant/salmon/{sample}/quant.sf"
            for sample in config["pair"]
        }
    output:
        TPM = "quant/TPM.tsv",
        NumReads = "quant/NumReads.tsv"
    message:
        "Merging all Salmon quantifications into single tables"
    threads: 1
    resources:
        mem_mb = (
            lambda wildcards, attempt: min(attempt * 768, 12288)
        )
    log:
        "logs/merge_quants.log"
    wrapper:
        "https://raw.githubusercontent.com/tdayris/yawn/master/SnakemakeWrappers/pandamerge/1.0"


rule PCA:
    input:
        "quant/TPM.tsv"
    output:
        "images/TPM_PC_1_PC_2.png",
        "images/TPM_PC_3_PC_4.png"
    message:
        "Building PCA from {input}"
    threads: 1
    resources:
        mem_mb = (
            lambda wildcards, attempt: min(attempt * 768, 8192)
        )
    log:
        "logs/PCA.logs"
    params:
        conditions = config["conditions"]
    wrapper:
        "https://raw.githubusercontent.com/tdayris/yawn/master/SnakemakeWrappers/PCA/1.0"
